@model TglCA.Mvc.PL.Models.CoinViewModel;

@section Head {
    <script>
        window.onload = function() {
            var dataPoints1;
            var dataPoints2;
            var dataPoints3;
            var chart = new CanvasJS.Chart("chartContainer", {
                zoomEnabled: true,
                axisX: {
                    crosshair: {
                        enabled: true,
                        snapToDataPoint: true
                    }
                },
                axisY: {
                    crosshair: {
                        enabled: true,
                        snapToDataPoint: true,
                        valueFormatString: "#,##0"
                    }
                },
                toolTip: {
                    shared: true
                },
                legend: {
                    dockInsidePlotArea: true,
                    verticalAlign: "top",
                    horizontalAlign: "right"
                },
                data: [{
                    type: "line",
                    markerType: "none",
                    xValueType: "dateTime",
                    xValueFormatString: "hh:mm:ss TT",
                    name: "Market 1",
                    showInLegend: true,
                    dataPoints: dataPoints1
                },
                {
                    type: "line",
                    markerType: "none",
                    xValueType: "dateTime",
                    name: "Market 2",
                    showInLegend: true,
                    dataPoints: dataPoints2
                },
                {
                    type: "line",
                    markerType: "none",
                    xValueType: "dateTime",
                    name: "Market 3",
                    showInLegend: true,
                    dataPoints: dataPoints3
                }]
            });

            chart.render();
            getInitialData();
            isSubscribed();
            function addData(data) {
                chart.render();
                setTimeout(updateData, 3000);
            }

            function addInitialData(data) {

            }
            function updateData() {
                $.getJSON("/Coin/CoinChartGetCurrentValue/" + "@Model.Currency.Symbol", addData);
            }

            function getInitialData() {
                $.getJSON("/Coin/CoinChartInitialValues/" + "@Model.Currency.Symbol", addInitialData);
            }

            function isSubscribed() {
                $.getJSON("/Account/IsSubscribed/" + "@Model.Currency.Symbol", function(data) {
                    var btn = document.getElementById("subscribeButton");
                    if (data.status) {
                        btn.classList.add("btn-outline-danger");
                        btn.innerText = "Unsubscribe";
                    }
                    else {
                        btn.classList.add("btn-outline-success");
                        btn.innerText = "Subscribe";
                    }
                })
            }
        }
    </script>
    <script src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
    <script src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>
}
    <div class="mt-3 d-flex flex-column" id="mainCoinInfoContainer">
        <div class="d-flex flex-row justify-content-around" id="coinInfoCurrency">
            <div class="d-flex flex-row justify-content-around" id="coinInfoCurrencyNamePrice">
                <div class="d-flex flex-row align-items-center mb-1 mt-1" id="coinInfoNameConteiner">
                    <img class="coinIconBig" src="@Model.Currency.Img" />
                    <p class="m-0 fs-4" id="coinInfoName">
                        <strong>@Model.Currency.AssetName (@Model.Currency.Symbol)</strong>
                    </p>
                </div>
                <div class="d-flex flex-row align-items-center" id="coinInfoPriceContainer">
                    <p class="me-2 mb-0 fs-2">
                        <strong>$@Model.Currency.Price</strong>
                    </p>
                    @if (@Model.Currency.PercentChange24h >= 0)
                {
                    <p class="m-0 text-success fs-5">&#9650 @Model.Currency.PercentChange24h%</p>
                }
                else
                {
                    <p class="m-0 text-danger fs-5">&#9660 @Model.Currency.PercentChange24h%</p>
                }
            </div>
            <div class="d-flex" id="coinInfoButtonsContainer">
                <div id="coinInfoSubscribeButtonContainer">
                    <a id="subscribeButton" class="btn btn-outline-secondary" asp-controller="Account" asp-action="Subscribe" asp-route-symbol="@Model.Currency.Symbol">Subscribe</a>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="d-flex flex-column mt-2" id="coinInfoChartMainContainer">
    <div class="d-flex justify-content-center" id="coinInfoChartHeader">
        <p class="fs-4" id="chartHeaderText">
            <strong>@Model.Currency.AssetName Price Chart (@Model.Currency.Symbol.ToUpper()/USD)</strong>
        </p>
    </div>
    <div id="chartContainer">
    </div>
</div>


